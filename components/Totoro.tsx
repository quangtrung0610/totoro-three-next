/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useEffect, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useFrame } from "@react-three/fiber";
import { useSphere } from "@react-three/cannon";
import { useKeyboard } from "../hooks/useKeyboard";

type GLTFResult = GLTF & {
	nodes: {
		Body: THREE.Mesh;
		Arms: THREE.Mesh;
		Claws_arms: THREE.Mesh;
		Belly: THREE.Mesh;
		Marks_belly: THREE.Mesh;
		Marks_belly001: THREE.Mesh;
		Ears: THREE.Mesh;
		Sphere: THREE.Mesh;
		Sphere_1: THREE.Mesh;
		Feet: THREE.Mesh;
		Claws_feet: THREE.Mesh;
		Leaf_hat: THREE.Mesh;
		Stalk: THREE.Mesh;
		Nose: THREE.Mesh;
		Tail: THREE.Mesh;
		Whiskers: THREE.Mesh;
	};
	materials: {
		skin: THREE.MeshStandardMaterial;
		claws: THREE.MeshStandardMaterial;
		belly: THREE.MeshStandardMaterial;
		["eyes | sclera"]: THREE.MeshStandardMaterial;
		["eyes | pupil"]: THREE.MeshStandardMaterial;
		["leaf | body"]: THREE.MeshStandardMaterial;
		["leaf | stalk"]: THREE.MeshStandardMaterial;
		nose: THREE.MeshStandardMaterial;
		whiskers: THREE.MeshStandardMaterial;
	};
};

const JUMP_FORCE = 10;
const MOVE_FORCE = 1;

export function Model(props: JSX.IntrinsicElements["group"]) {
	//@ts-ignore
	const { nodes, materials } = useGLTF("/totoro.gltf") as GLTFResult;
	const actions = useKeyboard();
	// console.log(
	// 	"actions: ",
	// 	Object.entries(actions).filter(([key, value]) => value)
	// );

	const [ref, api] = useSphere<THREE.Group>(() => ({
		mass: 1,
		type: "Dynamic",
		position: [0, 6, 0],
	}));

	const vel = useRef([0, 0, 0]);
	useEffect(() => {
		api.velocity.subscribe((velocity) => {
			vel.current = velocity;
		});
	}, [api.velocity]);

	const pos = useRef([0, 0, 0]);
	useEffect(() => {
		api.position.subscribe((position) => {
			pos.current = position;
		});
	}, [api.position]);

	const rot = useRef([0, 0, 0]);
	useEffect(() => {
		api.rotation.subscribe((rotation) => {
			rot.current = rotation;
		});
	}, [api.rotation]);

	useFrame(() => {
		if (!ref.current) return;
		
		if (actions.jump && pos.current[1] < 1) {
			api.velocity.set(vel.current[0], JUMP_FORCE, vel.current[2]);
		}
		if (actions.moveLeft) {
			if (rot.current[1] == 0) {
				api.rotation.set(
					rot.current[0],
					rot.current[1] - Math.PI / 2,
					rot.current[2]
				);
			}
			if (rot.current[1] > 0) {
				api.rotation.set(
					rot.current[0],
					rot.current[1] - Math.PI,
					rot.current[2]
				);
			}
			api.position.set(
				pos.current[0] - MOVE_FORCE,
				pos.current[1],
				pos.current[2]
			);
		}
		if (actions.moveRight) {
			if (rot.current[1] == 0) {
				api.rotation.set(
					rot.current[0],
					rot.current[1] + Math.PI / 2,
					rot.current[2]
				);
			}
			if (rot.current[1] < 0) {
				api.rotation.set(
					rot.current[0],
					rot.current[1] + Math.PI,
					rot.current[2]
				);
			}
			api.position.set(
				pos.current[0] + MOVE_FORCE,
				pos.current[1],
				pos.current[2]
			);
		}
		if (actions.moveBackward) {
			if (rot.current[1] != 0) {
				api.rotation.set(rot.current[0], 0, rot.current[2]);
			}
			api.position.set(
				pos.current[0],
				pos.current[1],
				pos.current[2] + MOVE_FORCE
			);
		}

		if (actions.moveForward) {
			// if (rot.current[1] != 3.141592653589793) {
			// 	console.log(Math.round(rot.current[1]));
			// 	api.rotation.set(rot.current[0], Math.PI, rot.current[2]);
			// }
			api.position.set(
				pos.current[0],
				pos.current[1],
				pos.current[2] - MOVE_FORCE
			);
		}
	});

	return (
		<group {...props} dispose={null} ref={ref}>
			<primitive object={new THREE.AxesHelper(50)} />
			<mesh
				geometry={nodes.Body.geometry}
				material={materials.skin}
				position={[0, 12.5, 0]}
				scale={7.42}
			>
				<mesh
					geometry={nodes.Arms.geometry}
					material={materials.skin}
					position={[0.89, -0.2, -0.12]}
					rotation={[0, 0, 0.19]}
					scale={0.34}
				>
					<mesh
						geometry={nodes.Claws_arms.geometry}
						material={materials.claws}
						position={[-0.04, -2.46, -0.48]}
						rotation={[0.05, 0.25, 0.06]}
						scale={0.28}
					/>
				</mesh>
				<mesh geometry={nodes.Belly.geometry} material={materials.belly}>
					<mesh
						geometry={nodes.Marks_belly.geometry}
						material={materials.skin}
						position={[0, -0.11, 0.88]}
						rotation={[-0.52, 0, 0]}
						scale={[0.11, 0.04, 0.01]}
					/>
					<mesh
						geometry={nodes.Marks_belly001.geometry}
						material={materials.skin}
						position={[0.43, -0.3, 0.86]}
						rotation={[-0.42, 0.43, 0.18]}
						scale={[0.11, 0.04, 0.01]}
					/>
				</mesh>
				<mesh
					geometry={nodes.Ears.geometry}
					material={materials.skin}
					position={[0.44, 0.93, 0]}
					rotation={[0, 0, -0.27]}
					scale={0.05}
				/>
				<group
					position={[0.46, 0.32, 0.78]}
					rotation={[-0.24, 0.63, -0.11]}
					scale={[0.11, 0.11, 0.05]}
				>
					<mesh
						geometry={nodes.Sphere.geometry}
						material={materials["eyes | sclera"]}
					/>
					<mesh
						geometry={nodes.Sphere_1.geometry}
						material={materials["eyes | pupil"]}
					/>
				</group>
				<mesh
					geometry={nodes.Feet.geometry}
					material={materials.skin}
					position={[0.26, -1.5, -0.12]}
					rotation={[0, -1.19, 1.63]}
					scale={[0.24, 0.18, 0.24]}
				>
					<mesh
						geometry={nodes.Claws_feet.geometry}
						material={materials.claws}
						position={[-0.72, -2.4, -0.04]}
						rotation={[0.12, 0.19, -0.22]}
						scale={[0.36, 0.58, 0.32]}
					/>
				</mesh>
				<mesh
					geometry={nodes.Leaf_hat.geometry}
					material={materials["leaf | body"]}
					position={[0, 0.92, 0]}
					scale={0.41}
				>
					<mesh
						geometry={nodes.Stalk.geometry}
						material={materials["leaf | stalk"]}
						position={[0.01, 0.41, -1.3]}
						rotation={[0.08, 0, 0]}
						scale={[0.15, 0.08, 0.59]}
					/>
				</mesh>
				<mesh
					geometry={nodes.Nose.geometry}
					material={materials.nose}
					position={[0, 0.38, 0.8]}
					rotation={[1.01, 0, 0]}
					scale={[0.13, 0.12, 0.09]}
				/>
				<mesh
					geometry={nodes.Tail.geometry}
					material={materials.skin}
					position={[0, -1.34, -0.86]}
					scale={[0.31, 0.31, 0.4]}
				/>
				<mesh
					geometry={nodes.Whiskers.geometry}
					material={materials.whiskers}
					position={[0.42, 0.2, 0.4]}
					rotation={[0, 0.35, -0.05]}
					scale={0.04}
				/>
			</mesh>
		</group>
	);
}

useGLTF.preload("/totoro.gltf");
